/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const UseDragLazyImport = createFileRoute('/use-drag')()
const TerminalLazyImport = createFileRoute('/terminal')()
const DialogLazyImport = createFileRoute('/dialog')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const UseDragLazyRoute = UseDragLazyImport.update({
  id: '/use-drag',
  path: '/use-drag',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/use-drag.lazy').then((d) => d.Route))

const TerminalLazyRoute = TerminalLazyImport.update({
  id: '/terminal',
  path: '/terminal',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/terminal.lazy').then((d) => d.Route))

const DialogLazyRoute = DialogLazyImport.update({
  id: '/dialog',
  path: '/dialog',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/dialog.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/dialog': {
      id: '/dialog'
      path: '/dialog'
      fullPath: '/dialog'
      preLoaderRoute: typeof DialogLazyImport
      parentRoute: typeof rootRoute
    }
    '/terminal': {
      id: '/terminal'
      path: '/terminal'
      fullPath: '/terminal'
      preLoaderRoute: typeof TerminalLazyImport
      parentRoute: typeof rootRoute
    }
    '/use-drag': {
      id: '/use-drag'
      path: '/use-drag'
      fullPath: '/use-drag'
      preLoaderRoute: typeof UseDragLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/dialog': typeof DialogLazyRoute
  '/terminal': typeof TerminalLazyRoute
  '/use-drag': typeof UseDragLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/dialog': typeof DialogLazyRoute
  '/terminal': typeof TerminalLazyRoute
  '/use-drag': typeof UseDragLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/dialog': typeof DialogLazyRoute
  '/terminal': typeof TerminalLazyRoute
  '/use-drag': typeof UseDragLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/dialog' | '/terminal' | '/use-drag'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dialog' | '/terminal' | '/use-drag'
  id: '__root__' | '/' | '/dialog' | '/terminal' | '/use-drag'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  DialogLazyRoute: typeof DialogLazyRoute
  TerminalLazyRoute: typeof TerminalLazyRoute
  UseDragLazyRoute: typeof UseDragLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  DialogLazyRoute: DialogLazyRoute,
  TerminalLazyRoute: TerminalLazyRoute,
  UseDragLazyRoute: UseDragLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dialog",
        "/terminal",
        "/use-drag"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/dialog": {
      "filePath": "dialog.lazy.tsx"
    },
    "/terminal": {
      "filePath": "terminal.lazy.tsx"
    },
    "/use-drag": {
      "filePath": "use-drag.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
